name: 🐧 Linux Builds
on:
  workflow_call:

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: master
  SCONSFLAGS: verbose=yes warnings=extra werror=yes debug_symbols=no strict_checks=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TSAN_OPTIONS: suppressions=misc/error_suppressions/tsan.txt
  UBSAN_OPTIONS: suppressions=misc/error_suppressions/ubsan.txt

jobs:
  build-linux:
    # Stay one LTS before latest to increase portability of Linux artifacts.
    runs-on: ubuntu-20.04
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Pixel Debug
            cache-name: linux_pixel_engine_debug
            target: pixel_debug
            # bin: ./bin/pixel.linuxbsd.pixel_debug.x86_64
            artifact: true
            cache-limit: 1

          - name: Pixel Release
            cache-name: linux_pixel_engine_release
            target: pixel_debug
            # bin: ./bin/pixel.linuxbsd.pixel_release.x86_64
            artifact: true
            cache-limit: 1


    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # # Need newer mesa for lavapipe to work properly.
      # - name: Linux dependencies for tests
      #   if: matrix.proj-test
      #   run: |
      #     sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
      #     sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EB8B81E14DA65431D7504EA8F63F0F2B90935439
      #     sudo add-apt-repository "deb https://ppa.launchpadcontent.net/kisak/turtle/ubuntu ${{ matrix.os == 'ubuntu-20.04' && 'focal' || 'jammy' }} main"
      #     sudo apt-get install -qq mesa-vulkan-drivers

      # TODO: Figure out somehow how to embed this one.
      - name: wayland-scanner dependency
        run: |
          sudo apt-get install libwayland-bin

      - name: Free disk space on runner
        run: |
          echo "Disk usage before:" && df -h
          sudo rm -rf /usr/local/lib/android
          echo "Disk usage after:" && df -h

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        if: "!matrix.legacy-scons"
        uses: ./.github/actions/godot-deps

      # - name: Setup Python and SCons (legacy versions)
      #   if: matrix.legacy-scons
      #   uses: ./.github/actions/godot-deps
      #   with:
      #     # Sync with Ensure*Version in SConstruct.
      #     python-version: 3.8
      #     scons-version: 4.0

      # - name: Force remove preinstalled .NET SDKs
      #   if: matrix.build-mono
      #   run: |
      #     sudo rm -rf /usr/share/dotnet/sdk/*

      # - name: Setup older .NET SDK as baseline
      #   if: matrix.build-mono
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     # Targeting the oldest version we want to support to ensure it still builds.
      #     dotnet-version: 8.0.100

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }}
          platform: linuxbsd
          target: ${{ matrix.target }}
          # tests: ${{ matrix.tests }}
          scons-cache-limit: ${{ matrix.cache-limit }}

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      # - name: Generate C# glue
      #   if: matrix.build-mono
      #   run: |
      #     ${{ matrix.bin }} --headless --generate-mono-glue ./modules/mono/glue

      # - name: Build .NET solutions
      #   if: matrix.build-mono
      #   run: |
      #     dotnet --info
      #     ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd --werror

      - name: Prepare artifact
        if: matrix.artifact
        run: |
          strip bin/pixel.*
          chmod +x bin/pixel.*

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        if: matrix.artifact
        with:
          name: ${{ matrix.cache-name }}

      # - name: Dump Godot API
      #   uses: ./.github/actions/godot-api-dump
      #   if: matrix.api-dump
      #   with:
      #     bin: ${{ matrix.bin }}

      # - name: Unit tests
      #   if: matrix.tests
      #   run: |
      #     ${{ matrix.bin }} --version
      #     ${{ matrix.bin }} --help
      #     ${{ matrix.bin }} --headless --test --force-colors

      # - name: .NET source generators tests
      #   if: matrix.build-mono
      #   run: |
      #     dotnet test modules/mono/editor/Godot.NET.Sdk/Godot.SourceGenerators.Tests

      # # Check class reference
      # - name: Check for class reference updates
      #   if: matrix.doc-test
      #   run: |
      #     echo "Running --doctool to see if this changes the public API without updating the documentation."
      #     echo -e "If a diff is shown, it means that your code/doc changes are incomplete and you should update the class reference with --doctool.\n\n"
      #     ${{ matrix.bin }} --doctool --headless 2>&1 > /dev/null || true
      #     git diff --color --exit-code && ! git ls-files --others --exclude-standard | sed -e 's/^/New doc file missing in PR: /' | grep 'xml$'

      # # Check API backwards compatibility
      # - name: Check for GDExtension compatibility
      #   if: matrix.api-compat
      #   run: |
      #     ./misc/scripts/validate_extension_api.sh "${{ matrix.bin }}"

      # # Download and run the test project
      # - name: Test Godot project
      #   uses: ./.github/actions/godot-project-test
      #   if: matrix.proj-test
      #   with:
      #     bin: ${{ matrix.bin }}

      # # Test the project converter
      # - name: Test project converter
      #   uses: ./.github/actions/godot-converter-test
      #   if: matrix.proj-conv
      #   with:
      #     bin: ${{ matrix.bin }}
